
* Package Management

** Repository Management

NOTE: For Windows, you'll need GnuTLS DLLs. (Emacs for Windows isn't built with TLS support.)
Instructions found [[http://חנוך.se/diary/how_to_enable_GnuTLS_for_Emacs_24_on_Windows/index.en.html][here]].

This snippet enables all necessary repositories on start up.
Added org ELPA to get all of the nice =org-contrib= packages that I may someday want.

#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives
     '("melpa" . "https://melpa.org/packages/") t)

(add-to-list 'package-archives
     '("org" . "http://orgmode.org/elpa/") t)     
#+END_SRC

** =use-package= Bootsrap

We use =use-package= for package management and configuration. See =packages.org= for more information.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

* Init File Include Statements

If you need descriptions for any of these, just check each file for more info.

#+BEGIN_SRC emacs-lisp
(org-babel-load-file
 (expand-file-name "packages.org"
                   user-emacs-directory))

(org-babel-load-file
 (expand-file-name "mail.org"
                   user-emacs-directory))

(org-babel-load-file 
 (expand-file-name "org-mode.org"
                   user-emacs-directory))

;;(org-babel-load-file 
;; (expand-file-name "hydra.org"
;;                   user-emacs-directory))
#+END_SRC

* Modifications to Core Emacs Functionality

Here we'll change the default behaviors of Emacs.

** Buffer Management

=ibuffer= allows for buffer management from a nice menu.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(autoload 'ibuffer "ibuffer" "List buffers." t)
#+END_SRC

** Text Editing

I like line numbers, so I enable them globally.

#+BEGIN_SRC emacs-lisp
(global-linum-mode 1)
#+END_SRC

Some color themes increase line number font sizes with =org-mode= headers
and the fixed width of the line number column cuts it off. I found a post
[[https://unix.stackexchange.com/questions/29786/font-size-issues-with-emacs-in-linum-mode/30087#30087][here]] that suggests a fix.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'linum nil :height 100)
#+END_SRC

Turn on current line highlighting globally:

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode +1)
#+END_SRC

** Interface

Disable the scroll bar by default.

#+BEGIN_SRC emacs-lisp
(toggle-scroll-bar -1)
#+END_SRC

I found a way to maximize the Emacs window on startup [[https://emacs.stackexchange.com/questions/2999/how-to-maximize-my-emacs-frame-on-start-up][here]].

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

** Startup

Who likes the startup message?

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** shell-mode

Reference for everything below found [[http://manuel-uberti.github.io/emacs/2017/10/07/m-x-shell/][here]].

Set =/bin/bash= as the default shell.

#+BEGIN_SRC emacs-lisp
;;(setq explicit-shell-file-name "/bin/bash")
#+END_SRC

Better history.

#+BEGIN_SRC emacs-lisp
(unbind-key "C-c C-l" shell-mode-map)
(bind-key "C-c C-l" #'counsel-shell-history shell-mode-map)
#+END_SRC

Full window when invoking =shell-mode=.

#+BEGIN_SRC emacs-lisp
(setq
 display-buffer-alist
 `(
   ;; … other stuff …
   (,(rx bos "*shell")
    (display-buffer-same-window)
    (reusable-frames . nil))
   ;; … other stuff …
  ))
#+END_SRC

** Window Management

I looked up many potential solutions for this issue but haven't really found one that I liked.
Ultimately, the goal is to save window layouts and restore them with key bindings. I found
[[https://oremacs.com/2016/06/27/ivy-push-view/][this]] which points out that =ivy= provides this functionality.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c v") 'ivy-push-view)
(global-set-key (kbd "C-c V") 'ivy-pop-view)
#+END_SRC
