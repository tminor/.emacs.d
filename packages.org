
* Intro

This file is meant for any packages we decide to add as we embark upon
our Emacs journey. If any package's =:config= declaration begins to 
expand beyond a few lines, it may be worth breaking that package's
configuration out to its own eponymous file.

* Evil Mode

I'm accustomed to =vi= style text editing, so we make Emacs like
=vi= with =evil-mode=.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
  (evil-mode 1))
#+END_SRC

* Window, Buffer, and Frame Management

** Window

=ace-window= allows for easy window navigation. We change the window keys
to the home row instead of the number row. We also assign =M-p= to invoke
=ace-window= mode.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :config
  ;; ace-window meta key, change window keys to home row
  (global-set-key (kbd "M-p") 'ace-window)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC

** Ivy

Ivy is a generic completion mechanism for Emacs that enables nice completion
functionality to built in commands. It contains Swiper and Counsel as well.
I opted for Ivy over Helm as it seems to be the  *cool* way to do things.
Guide [[https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html][here]].

#+BEGIN_SRC emacs-lisp
;; https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t
            ivy-count-format "%d/%d "))
#+END_SRC

* Source Control

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC
* Miscellaneous

** Try

Enables temporarily downloading and installing packages for the purpose
of test driving. I discovered it [[http://cestlaz.github.io/posts/using-emacs-1-setup/#.Wb03a44pCfU][here]].

#+BEGIN_SRC emacs-lisp
;; From http://cestlaz.github.io/posts/using-emacs-1-setup/#.Wb03a44pCfU
(use-package try
  :ensure t)
#+END_SRC

** Which Key

This a nice package that helps Emacs neophytes such as myself. It lists
possivle key chord completion given at least one key press.
I found out about it [[http://cestlaz.github.io/posts/using-emacs-1-setup/#.Wb03a44pCfU][here]].

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t 
  :config
  (which-key-mode))
#+END_SRC

** Rainbow Mode 

Rainbow mode changes the background of any color name. This includes hexidecimal
representation of colors.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t)
#+END_SRC

* Writing Code

** PowerShell

#+BEGIN_SRC emacs-lisp
(use-package powershell
  :ensure t)
#+END_SRC

** =puppet-mode=

Syntax highlighting for Puppet.

#+BEGIN_SRC emacs-lisp
(use-package puppet-mode
  :ensure t)
#+END_SRC

** Complete Any Mode

General completion mechanism.

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t)
#+END_SRC

*** Python

Python JEDI backend for =company-mode=.

NOTE: Don't forget to install =virtualenv= (=$ pip install virtualenv=) and run =M-x jedi:install-server=.

#+BEGIN_SRC emacs-lisp
(use-package company-jedi
  :ensure t
  :config
    (defun my/python-mode-hook ()
      (add-to-list 'company-backends 'company-jedi))
    (add-hook 'python-mode-hook 'my/python-mode-hook))
#+END_SRC

*** Shell

=company-shell= provides completion for fish and binaries found on =$PATH=.

Find more documentation [[https://github.com/Alexander-Miller/company-shell][here]].

#+BEGIN_SRC emacs-lisp
(use-package company-shell
  :ensure t
  :config
    (add-to-list 'company-backends 
                 '(company-shell company-shell-env company-fish-shell))
    (setq company-shell-clean-manpage t))
#+END_SRC

** =rainbow-delimiters=

This makes hunting down paren pairs easier in Elisp:

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

* File and Project Browsing

** neotree

Use neotree with some =evil-mode= stuff.

#+BEGIN_SRC emacs-lisp
;;(use-package neotree
;;  :ensure t
;;  :config
;;    (add-hook 'neotree-mode-hook
;;            (lambda ()
;;              (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
;;              (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
;;              (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
;;              (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)))
;;    (global-set-key [f8] 'neotree-toggle))
#+END_SRC

** Treemacs

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (use-package treemacs-evil
      :ensure t
      :demand t)
    (setq treemacs-change-root-without-asking nil
          treemacs-collapse-dirs              (if (executable-find "python") 3 0)
          treemacs-file-event-delay           5000
          treemacs-follow-after-init          t
          treemacs-follow-recenter-distance   0.1
          treemacs-goto-tag-strategy          'refetch-index
          treemacs-indentation                2
          treemacs-indentation-string         " "
          treemacs-is-never-other-window      nil
          treemacs-never-persist              nil
          treemacs-no-png-images              nil
          treemacs-recenter-after-file-follow nil
          treemacs-recenter-after-tag-follow  nil
          treemacs-show-hidden-files          t
          treemacs-silent-filewatch           nil
          treemacs-silent-refresh             nil
          treemacs-sorting                    'alphabetic-desc
          treemacs-tag-follow-cleanup         t
          treemacs-tag-follow-delay           1.5
          treemacs-width                      35)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'extended))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ([f8]         . treemacs-toggle)
        ("M-0"        . treemacs-select-window)
        ("C-c 1"      . treemacs-delete-other-windows)
        ("M-n Ft"     . treemacs-toggle)
        ("M-n fT"     . treemacs)
        ("M-n fB"     . treemacs-bookmark)
        ("M-n f C-t"  . treemacs-find-file)
        ("M-n f M-t"  . treemacs-find-tag)))

(use-package treemacs-projectile
  :defer t
  :ensure t
  :config
  (setq treemacs-header-function #'treemacs-projectile-create-header)
  :bind (:map global-map
              ("M-n fP" . treemacs-projectile)
              ("M-n fp" . treemacs-projectile-toggle)))
#+END_SRC

